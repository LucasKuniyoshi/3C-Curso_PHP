Ligar xampp (Apache e MySql);

*** (ELE PEGA SOMENTE AS PASTAS Q ESTÃO DENTRO DELE C: XAMPP/HTDOCS/CURSO_PHP) ***
http://localhost/curso_php/1_intro/dois.php EXEMPLO DE COMO ACESSAR

expoente (exponeciação) => **

(5_expressoes e operadores/2_mudancas tipo implicitas)
concatenação => 5 . 5 => 55 (string) / "." PERMITE JUNTAR DOIS ELEMENTOS;
NORMALMENTE USADO PARA SOMAR STRINGS

count($a) = tamanho do vetor $a

Include => possibilida rodar com páginas q n existem,
Require => se eu chamar um página e ela n existir, a aplicação n roda
Implode => JUNTA O VETOR NUMA STRING ÚNICA, POSSIBILITA SEPARÁ-LOS COMO QUEIRA
$a .= "$array[$i]." CONCATENA O $a COM OS VALORES DO ARRAY.
==================================================

CHAMANDO UM METODO DE UMA CLASSE:
USAMOS "->" E N MAIS "."
lucas.falar() ==> $lucas->falar(); 

Printando constantes: self::BRANCOS
class Humano{
    public const OLHOS = 2;
    public const BRACOS = 2;
    public const PERNAS = 2;

    function mostrarConstante(){
        //utilizando constante em metodo
        echo self::BRACOS . "\n";
    }
}

=================================
POO - Classes:
THIS - aponta para a instância atual, aponta pros valores DAQUELE OBJETO!!! 
instanceof verifica se aquela variável pertence aquela classe

TRAIT - PERMITE USAR DIFERENTES CLASSES SEM PRECISAR DE HERANÇA

=============================
div.titulo => <div class="titulo"></div> (comando shorthand)

INTERPOLAÇÃO:
{$this->nome}

CONSTRUTOR: 
//PODE SE CRIAR O CONSTRUTOR COM VALORES JA PRE-DEFINIDOS
function __construct($novoNome, $idade = 18){}

HERANÇA:
public function apresentar(){
    echo "@{$this->login}: ";
    parent::apresentar(); //PUXA A FUNÇÃO apresentar() DA CLASSE PAI 
}